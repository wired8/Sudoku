{"version":3,"sources":["actions/types.js","reducers/index.js","reducers/board.js","components/cell.js","components/grid.js","components/square.js","components/board.js","actions/gameActions.js","components/game.js","api/methods/game.js","components/app.js","index.js"],"names":["NEW_GAME","ENTER_VALUE","SOLVE","VALIDATE","rootReducer","combineReducers","board","state","action","type","startBoard","errorCells","currentBoard","originalBoard","solved","errors","filter","x","length","completed","array_index","value","newBoard","Cell","row","col","this","parseInt","possibleValues","Array","prototype","flatten","concat","apply","EMPTY","temp","i","push","join","Grid","currentRow","input","console","log","rows","idx","output","j","toString","grids","sameSubGridAs","_columns","forEach","cell","columns","subgrid","index","startRow","startCol","subGridRow","c","some","peers","from","Set","sameColAs","sameRowAs","map","Square","evt","target","isInt","props","onCellValueChange","isNaN","parseFloat","maxLength","onChange","fireOnChange","bind","className","getCellStyling","id","isSolved","Component","SudukoBoard","grid","cellCount","key","connect","newGame","solve","validate","SudokuGame","NewGame","Solve","dispatch","enterValue","Validate","onCellValueEdited","onClick","args","fetch","then","response","json","puzzle","e","encodeURIComponent","requestBody","method","headers","body","App","store","history","browserHistory","exact","path","component","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.589e08bb.chunk.js","sourcesContent":["export const NEW_GAME = 'NEW_GAME';\nexport const ENTER_VALUE = 'ENTER_VALUE';\nexport const SOLUTION_CHECK = 'SOLUTION_CHECK';\nexport const SOLVE = 'SOLVE';\nexport const VALIDATE = 'VALIDATE';","import { combineReducers } from 'redux';\nimport boardReducer from './board';\n\nconst rootReducer = combineReducers({\n  board: boardReducer\n});\n\nexport default rootReducer;","import { NEW_GAME, ENTER_VALUE, SOLVE, VALIDATE } from '../actions/types';\n\nexport default function boardReducer(state = {}, action) {\n  switch (action.type) {\n    case NEW_GAME: {\n      const { type, startBoard, errorCells } = action;\n      return { ...state, currentBoard: [...startBoard], originalBoard: [...startBoard], errorCells: errorCells, solved: false }\n    }\n\n    case SOLVE: {\n      const { type, currentBoard } = action;\n      return { ...state, currentBoard: currentBoard, errorCells: [], solved: true }\n    }\n\n    case VALIDATE: {\n      const { type, errorCells } = action;\n      const errors = errorCells ? errorCells.filter(x => x === true).length : -1;\n      const completed = state.currentBoard.filter(x => x !== 0).length;\n      const solved = errors === 0 && completed === 81;\n      return { ...state, errorCells: errorCells, solved: solved }\n    }\n\n    case ENTER_VALUE: {\n      const { type, array_index, value } = action;\n      let newBoard = state.currentBoard;\n      newBoard[array_index] = value;\n      return { ...state, currentBoard: newBoard }\n    }\n\n    default:\n      return state\n  }\n}","export default class Cell {\n  constructor(row, col, value) {\n    this.value = value || 0;\n    this.row = row;\n    this.col = col;\n    if (value === \".\" || value === \"\") {\n      this.value = 0;\n    } else {\n      this.value = parseInt(value, 10);\n    }\n\n    this.possibleValues = [];\n  }\n\n  toString() {\n    return this.value || \".\";\n  }\n}","import Cell from \"./cell\";\n\n/*\n    [[1, 2, 3], [4, 5, 6]].flatten()\n\n    [1, 2, 3, 4, 5, 6]\n*/\nArray.prototype.flatten = function() {\n    return [].concat.apply([], this);\n};\n\nconst EMPTY = (() => {\n    let temp = [];\n    for (let i = 0; i < 81; i++) {\n        temp.push(\".\");\n    }\n    return temp.join(\"\");\n})();\n\nexport default class Grid {\n    constructor(input = EMPTY) {\n        console.log(input);\n        let currentRow;\n        this.rows = [];\n\n        for (let idx = 0; idx < input.length; idx++) {\n            if (idx % 9 === 0) {\n                currentRow = [];\n                this.rows.push(currentRow);\n            }\n\n            currentRow.push(\n                new Cell(this.rows.length - 1, currentRow.length, input[idx])\n            );\n        }\n    }\n\n    toString() {\n        let output = \"\";\n        for (let i = 0; i < this.rows.length; i++) {\n            if (i !== 0 && i % 3 === 0) {\n                output += \"---------+---------+---------\\n\";\n            }\n\n            let currentRow = this.rows[i];\n            for (let j = 0; j < currentRow.length; j++) {\n                if (j !== 0 && j % 3 === 0) {\n                    output += \"|\";\n                }\n\n                output += \" \" + currentRow[j].toString() + \" \";\n            }\n\n            output += \"\\n\";\n        }\n\n        return output;\n    }\n\n    subgrids() {\n        if (!this.grids) {\n            this.grids = [];\n            for (let i = 0; i < 9; i += 3) {\n                for (let j = 0; j < 9; j += 3) {\n                    this.grids.push(this.sameSubGridAs(new Cell(i, j)));\n                }\n            }\n        }\n\n        return this.grids;\n    }\n\n    columns() {\n        if (!this._columns) {\n            this._columns = [];\n            for (let i = 0; i < 9; i++) {\n                this._columns.push([]);\n            }\n            this.rows.forEach(function(row) {\n                row.forEach(function(cell, idx) {\n                    this._columns[idx].push(cell);\n                }, this);\n            }, this);\n        }\n\n        return this._columns;\n    }\n\n    sameRowAs(cell) {\n        return this.rows[cell.row];\n    }\n\n    sameColAs(cell) {\n        return this.columns()[cell.col];\n    }\n\n    sameSubGridAs(cell) {\n        /*\n            Get all the cells in the same \"sub grid\" as the given cell. e.g.\n            for the cell \"c\" below the cells in the \"same_sub_grid\" (which are\n            marked x below) are returned along with the argument cell.\n\n            x x x | . . . | . . .\n            x c x | . . . | . . .\n            x x x | . . . | . . .\n            ------+-------+------\n            . . . | . . . | . . .\n            . . . | . . . | . . .\n            . . . | . . . | . . .\n            ------+-------+------\n            . . . | . . . | . . .\n            . . . | . . . | . . .\n            . . . | . . . | . . .\n        */\n\n        // row:\n        // 0 - 2 -> 0\n        // 3 - 5 -> 3\n        // 6 - 8 -> 5\n\n        // col:\n        // same as above\n        if (!cell.subgrid) {\n            let index = function(x) {\n                if (x <= 2) {\n                    return 0;\n                } else if (x <= 5) {\n                    return 3;\n                } else {\n                    return 6;\n                }\n            };\n\n            let startRow = index(cell.row),\n                startCol = index(cell.col),\n                subgrid = [];\n            for (let i = startRow; i < startRow + 3; i++) {\n                let row = this.rows[i],\n                    subGridRow = [];\n                for (let j = startCol; j < startCol + 3; j++) {\n                    subGridRow.push(row[j]);\n                }\n\n                subgrid.push(subGridRow);\n            }\n            cell.subgrid = subgrid;\n        }\n\n        return cell.subgrid;\n    }\n\n    unsolved() {\n        return this.rows.flatten().filter(c => c.value === 0);\n    }\n\n    isSolved() {\n        return !this.rows.flatten().some(x => x.value === 0);\n    }\n\n    peers(cell) {\n        /*\n            Get the peers for the cell.  The peers for the cell \"c\" are pictorially\n            represented below by the cells marked \"x\"\n\n            x x x | . . . | . . .\n            x c x | x x x | x x x\n            x x x | . . . | . . .\n            ------+-------+------\n            . x . | . . . | . . .\n            . x . | . . . | . . .\n            . x . | . . . | . . .\n            ------+-------+------\n            . x . | . . . | . . .\n            . x . | . . . | . . .\n            . x . | . . . | . . .\n        */\n        if (!cell.peers) {\n            cell.peers = Array.from(\n                new Set(\n                    this.sameColAs(cell)\n                        .concat(this.sameRowAs(cell))\n                        .concat(this.sameSubGridAs(cell).flatten())\n                        .filter(x => x !== cell)\n                )\n            );\n        }\n\n        return cell.peers;\n    }\n\n    toFlatString() {\n        return this.rows\n            .flatten()\n            .map(x => x.toString())\n            .join(\"\");\n    }\n}","import React, { Component } from \"react\";\nimport \"../assets/style/index.css\";\n\nexport default class Square extends Component {\n  fireOnChange(evt) {\n    let value = evt.target.value;\n    console.log('value:',value);\n    if (this.isInt(value) || value === \"\") {\n      this.props.onCellValueChange(\n        this.props.row,\n        this.props.col,\n        evt.target.value\n      );\n    }\n  }\n\n  isInt(value) {\n    return !isNaN(value) && (function(x) { return (x | 0) === x; })(parseFloat(value))\n  }\n\n  render() {\n    const value = this.props.value;\n    return (\n      <input\n        type=\"tel\"\n        value={!this.isInt(value) || value === 0 ? \"\" : value}\n        maxLength=\"1\"\n        onChange={this.fireOnChange.bind(this)}\n        className={this.getCellStyling(this.props.row, this.props.col)}\n        id={this.props.id}\n      />\n    );\n  }\n\n  getCellStyling(row, col) {\n    const board = this.props.currentBoard;\n    const index = (row * 9) + col;\n    if (this.props.currentBoard && this.props.currentBoard[index] && this.props.isSolved) {\n      return 'solved-cell';\n    }\n    if (this.props.errorCells && this.props.errorCells[index]) {\n      return 'invalid-cell';\n    }\n    if (board && board[index] === 0) {\n      return null;\n    }\n    return 'valid-cell';\n  }\n}\n\n\n\n\n\n","import React, { Component } from \"react\";\nimport Grid from \"./grid\";\nimport Square from \"./square\";\nimport { connect } from 'react-redux';\n\nclass SudukoBoard extends Component {\n  render() {\n    const grid = new Grid(this.props.board.currentBoard);\n    let cellCount = 0;\n    return (\n      <div className={'sudoku-board'}>\n        <table id=\"grid\">\n          <tbody>\n          {grid.rows.map((row, idx) => {\n            return (\n              <tr key={idx}>\n                {row.map(cell => (\n                  <td key={cell.col}>\n                    <Square\n                      value={cell.value}\n                      row={cell.row}\n                      col={cell.col}\n                      id={`cell-${cellCount++}`}\n                      currentBoard={this.props.board.currentBoard}\n                      errorCells={this.props.board.errorCells}\n                      isSolved={this.props.board.solved}\n                      onCellValueChange={this.props.onCellValueChange}\n                    />\n                  </td>\n                ))}\n              </tr>\n            );\n          })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return { board: state.board }\n}\n\nexport default connect(mapStateToProps)(SudukoBoard)","import { NEW_GAME, ENTER_VALUE, SOLUTION_CHECK, SOLVE, VALIDATE } from './types'\n\nexport const newGame = (startBoard, errorCells) => {\n  return {\n    type: NEW_GAME, startBoard, errorCells\n  }\n};\n\nexport const enterValue = (array_index, value) => {\n  return {\n    type: ENTER_VALUE, array_index, value\n  }\n};\n\nexport const solutionCheck = (currentBoard, solutionBoard) => {\n  return {\n    type: SOLUTION_CHECK\n  }\n};\n\nexport const solve = (currentBoard) => {\n  return {\n    type: SOLVE, currentBoard\n  }\n};\n\nexport const validate = (errorCells) => {\n  return {\n    type: VALIDATE, errorCells\n  }\n};\n\n\n","import React, { Component } from \"react\";\nimport SudukoBoard from \"./board\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {NewGame, Solve, Validate} from '../api/methods/game';\nimport {enterValue, validate} from '../actions/gameActions';\n\nclass SudokuGame extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillMount() {\n    this.props.NewGame();\n  }\n\n  solve() {\n    this.props.Solve(this.props.board.originalBoard);\n  }\n\n  onCellValueEdited(row, col, value) {\n    const index = (row * 9) + col;\n    if (!this.isInt(value)) {\n      value = 0;\n    }\n    this.props.dispatch(enterValue(index, parseInt(value, 10)));\n    this.props.Validate(this.props.board.currentBoard);\n  }\n\n  newGame() {\n    this.props.NewGame();\n  }\n\n  isInt(value) {\n    return !isNaN(value) && (function(x) { return (x | 0) === x; })(parseFloat(value))\n  }\n\n  render() {\n    return (\n      <div className=\"heading\">\n        <h1>Sudoku</h1>\n        <SudukoBoard\n          onCellValueChange={this.onCellValueEdited.bind(this)}\n        />\n        <div className={'buttons-container'}>\n          <button className={'button'} onClick={() => this.solve()}><span>Solve!</span></button>\n          <button className={'button'} onClick={() => this.newGame()}><span>New Game</span></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    NewGame: (args) => dispatch(NewGame()),\n    Solve: (args) => dispatch(Solve(args)),\n    Validate: (args) => dispatch(Validate(args)),\n    dispatch\n  };\n}\n\nfunction mapStateToProps(state){\n  return { board: state.board }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SudokuGame)","import { newGame, solve, validate } from '../../actions/gameActions.js';\n\nexport function NewGame() {\n  return (dispatch) => {\n    dispatch({ type: 'GET_NEW_BOARD' });\n    return fetch('http://localhost:3001/api/v1/game')\n      .then(response => response.json())\n      .then((json) => dispatch(newGame(json.board)));\n  };\n}\n\nexport function Solve(puzzle) {\n  return (dispatch) => {\n    dispatch({ type: 'SOLVE' });\n    const e = encodeURIComponent(puzzle);\n    const requestBody = `puzzle=${e}`;\n    return fetch('http://localhost:3001/api/v1/game/solve', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: requestBody\n    })\n      .then(response => response.json())\n      .then((json) => dispatch(solve(json.board)));\n  };\n}\n\nexport function Validate(puzzle) {\n  return (dispatch) => {\n    dispatch({ type: 'VALIDATE' });\n    const e = encodeURIComponent(puzzle);\n    const requestBody = `puzzle=${e}`;\n    return fetch('http://localhost:3001/api/v1/game/validate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: requestBody\n    })\n      .then(response => response.json())\n      .then((json) => dispatch(validate(json.errors)));\n  };\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { Router, Route, browserHistory } from 'react-router';\n\nimport SudokuGame from './game';\n\nconst App = ({ store }) => {\n  return (\n    <div>\n      <Provider store={store} >\n        <Router history={browserHistory}>\n          <Route exact path=\"/\" component={ SudokuGame } />\n        </Router>\n      </Provider>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/index';\nimport thunk from 'redux-thunk';\nimport App from './components/app';\n\nconst initial = { board: {currentBoard: [], startBoard: [], errorCells: [], solved: false} };\nconst store = createStore(rootReducer, initial, applyMiddleware(thunk));\n\nReactDOM.render(\n  <App store={store}/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}